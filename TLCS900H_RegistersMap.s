//
//  TLCS900H_RegistersMap.s
//  TLCS900H
//
//  Created by Fredrik Ahlström on 2008-04-02.
//  Copyright © 2008-2021 Fredrik Ahlström. All rights reserved.
//

#ifdef __arm__

	.equ BANK0C0,  0x00
	.equ BANK1C0,  0x20
	.equ BANK2C0,  0x40
	.equ BANK3C0,  0x60

	.equ BANK0C1, -0x20
	.equ BANK1C1,  0x00
	.equ BANK2C1,  0x20
	.equ BANK3C1,  0x40

	.equ BANK0C2, -0x40
	.equ BANK1C2, -0x20
	.equ BANK2C2,  0x00
	.equ BANK3C2,  0x20

	.equ BANK0C3, -0x60
	.equ BANK1C3, -0x40
	.equ BANK2C3, -0x20
	.equ BANK3C3,  0x00

	.equ RXWA,  0x00
	.equ RXBC,  0x04
	.equ RXDE,  0x08
	.equ RXHL,  0x0C
	.equ RXIX,  0x10
	.equ RXIY,  0x14
	.equ RXIZ,  0x18
	.equ RXSP,  0x1C

	.equ RERR_C0,  -0x04
	.equ RERR_C1,  -0x24
	.equ RERR_C2,  -0x44
	.equ RERR_C3,  -0x64

	.global registersOfsMap

#ifdef NDS
	.section .dtcm, "ax", %progbits		;@ For the NDS
#elif GBA
	.section .iwram, "ax", %progbits	;@ For the GBA
#else
	.section .text						;@ For anything else
#endif
	.align 2
;@----------------------------------------------------------------------------
registersOfsMap:
;@----------------------------------------------------------------------------
	// Code 0
	// BANK 0
	.byte BANK0C0+RXWA+0, BANK0C0+RXWA+1, BANK0C0+RXWA+2, BANK0C0+RXWA+3
	.byte BANK0C0+RXBC+0, BANK0C0+RXBC+1, BANK0C0+RXBC+2, BANK0C0+RXBC+3
	.byte BANK0C0+RXDE+0, BANK0C0+RXDE+1, BANK0C0+RXDE+2, BANK0C0+RXDE+3
	.byte BANK0C0+RXHL+0, BANK0C0+RXHL+1, BANK0C0+RXHL+2, BANK0C0+RXHL+3

	// BANK 1
	.byte BANK1C0+RXWA+0, BANK1C0+RXWA+1, BANK1C0+RXWA+2, BANK1C0+RXWA+3
	.byte BANK1C0+RXBC+0, BANK1C0+RXBC+1, BANK1C0+RXBC+2, BANK1C0+RXBC+3
	.byte BANK1C0+RXDE+0, BANK1C0+RXDE+1, BANK1C0+RXDE+2, BANK1C0+RXDE+3
	.byte BANK1C0+RXHL+0, BANK1C0+RXHL+1, BANK1C0+RXHL+2, BANK1C0+RXHL+3

	// BANK 2
	.byte BANK2C0+RXWA+0, BANK2C0+RXWA+1, BANK2C0+RXWA+2, BANK2C0+RXWA+3
	.byte BANK2C0+RXBC+0, BANK2C0+RXBC+1, BANK2C0+RXBC+2, BANK2C0+RXBC+3
	.byte BANK2C0+RXDE+0, BANK2C0+RXDE+1, BANK2C0+RXDE+2, BANK2C0+RXDE+3
	.byte BANK2C0+RXHL+0, BANK2C0+RXHL+1, BANK2C0+RXHL+2, BANK2C0+RXHL+3

	// BANK 3
	.byte BANK3C0+RXWA+0, BANK3C0+RXWA+1, BANK3C0+RXWA+2, BANK3C0+RXWA+3
	.byte BANK3C0+RXBC+0, BANK3C0+RXBC+1, BANK3C0+RXBC+2, BANK3C0+RXBC+3
	.byte BANK3C0+RXDE+0, BANK3C0+RXDE+1, BANK3C0+RXDE+2, BANK3C0+RXDE+3
	.byte BANK3C0+RXHL+0, BANK3C0+RXHL+1, BANK3C0+RXHL+2, BANK3C0+RXHL+3

	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0
	.byte RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0, RERR_C0

	// Previous Bank
	.byte BANK3C0+RXWA+0, BANK3C0+RXWA+1, BANK3C0+RXWA+2, BANK3C0+RXWA+3
	.byte BANK3C0+RXBC+0, BANK3C0+RXBC+1, BANK3C0+RXBC+2, BANK3C0+RXBC+3
	.byte BANK3C0+RXDE+0, BANK3C0+RXDE+1, BANK3C0+RXDE+2, BANK3C0+RXDE+3
	.byte BANK3C0+RXHL+0, BANK3C0+RXHL+1, BANK3C0+RXHL+2, BANK3C0+RXHL+3

	// Current Bank
	.byte BANK0C0+RXWA+0, BANK0C0+RXWA+1, BANK0C0+RXWA+2, BANK0C0+RXWA+3
	.byte BANK0C0+RXBC+0, BANK0C0+RXBC+1, BANK0C0+RXBC+2, BANK0C0+RXBC+3
	.byte BANK0C0+RXDE+0, BANK0C0+RXDE+1, BANK0C0+RXDE+2, BANK0C0+RXDE+3
	.byte BANK0C0+RXHL+0, BANK0C0+RXHL+1, BANK0C0+RXHL+2, BANK0C0+RXHL+3

	.byte BANK0C0+RXIX+0, BANK0C0+RXIX+1, BANK0C0+RXIX+2, BANK0C0+RXIX+3
	.byte BANK0C0+RXIY+0, BANK0C0+RXIY+1, BANK0C0+RXIY+2, BANK0C0+RXIY+3
	.byte BANK0C0+RXIZ+0, BANK0C0+RXIZ+1, BANK0C0+RXIZ+2, BANK0C0+RXIZ+3
	.byte BANK0C0+RXSP+0, BANK0C0+RXSP+1, BANK0C0+RXSP+2, BANK0C0+RXSP+3
;@----------------------------------------------------------------------------
	// Code 1
	// BANK 0
	.byte BANK0C1+RXWA+0, BANK0C1+RXWA+1, BANK0C1+RXWA+2, BANK0C1+RXWA+3
	.byte BANK0C1+RXBC+0, BANK0C1+RXBC+1, BANK0C1+RXBC+2, BANK0C1+RXBC+3
	.byte BANK0C1+RXDE+0, BANK0C1+RXDE+1, BANK0C1+RXDE+2, BANK0C1+RXDE+3
	.byte BANK0C1+RXHL+0, BANK0C1+RXHL+1, BANK0C1+RXHL+2, BANK0C1+RXHL+3

	// BANK 1
	.byte BANK1C1+RXWA+0, BANK1C1+RXWA+1, BANK1C1+RXWA+2, BANK1C1+RXWA+3
	.byte BANK1C1+RXBC+0, BANK1C1+RXBC+1, BANK1C1+RXBC+2, BANK1C1+RXBC+3
	.byte BANK1C1+RXDE+0, BANK1C1+RXDE+1, BANK1C1+RXDE+2, BANK1C1+RXDE+3
	.byte BANK1C1+RXHL+0, BANK1C1+RXHL+1, BANK1C1+RXHL+2, BANK1C1+RXHL+3

	// BANK 2
	.byte BANK2C1+RXWA+0, BANK2C1+RXWA+1, BANK2C1+RXWA+2, BANK2C1+RXWA+3
	.byte BANK2C1+RXBC+0, BANK2C1+RXBC+1, BANK2C1+RXBC+2, BANK2C1+RXBC+3
	.byte BANK2C1+RXDE+0, BANK2C1+RXDE+1, BANK2C1+RXDE+2, BANK2C1+RXDE+3
	.byte BANK2C1+RXHL+0, BANK2C1+RXHL+1, BANK2C1+RXHL+2, BANK2C1+RXHL+3

	// BANK 3
	.byte BANK3C1+RXWA+0, BANK3C1+RXWA+1, BANK3C1+RXWA+2, BANK3C1+RXWA+3
	.byte BANK3C1+RXBC+0, BANK3C1+RXBC+1, BANK3C1+RXBC+2, BANK3C1+RXBC+3
	.byte BANK3C1+RXDE+0, BANK3C1+RXDE+1, BANK3C1+RXDE+2, BANK3C1+RXDE+3
	.byte BANK3C1+RXHL+0, BANK3C1+RXHL+1, BANK3C1+RXHL+2, BANK3C1+RXHL+3

	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1
	.byte RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1, RERR_C1

	// Previous Bank
	.byte BANK0C1+RXWA+0, BANK0C1+RXWA+1, BANK0C1+RXWA+2, BANK0C1+RXWA+3
	.byte BANK0C1+RXBC+0, BANK0C1+RXBC+1, BANK0C1+RXBC+2, BANK0C1+RXBC+3
	.byte BANK0C1+RXDE+0, BANK0C1+RXDE+1, BANK0C1+RXDE+2, BANK0C1+RXDE+3
	.byte BANK0C1+RXHL+0, BANK0C1+RXHL+1, BANK0C1+RXHL+2, BANK0C1+RXHL+3

	// Current Bank
	.byte BANK1C1+RXWA+0, BANK1C1+RXWA+1, BANK1C1+RXWA+2, BANK1C1+RXWA+3
	.byte BANK1C1+RXBC+0, BANK1C1+RXBC+1, BANK1C1+RXBC+2, BANK1C1+RXBC+3
	.byte BANK1C1+RXDE+0, BANK1C1+RXDE+1, BANK1C1+RXDE+2, BANK1C1+RXDE+3
	.byte BANK1C1+RXHL+0, BANK1C1+RXHL+1, BANK1C1+RXHL+2, BANK1C1+RXHL+3

	.byte BANK1C1+RXIX+0, BANK1C1+RXIX+1, BANK1C1+RXIX+2, BANK1C1+RXIX+3
	.byte BANK1C1+RXIY+0, BANK1C1+RXIY+1, BANK1C1+RXIY+2, BANK1C1+RXIY+3
	.byte BANK1C1+RXIZ+0, BANK1C1+RXIZ+1, BANK1C1+RXIZ+2, BANK1C1+RXIZ+3
	.byte BANK1C1+RXSP+0, BANK1C1+RXSP+1, BANK1C1+RXSP+2, BANK1C1+RXSP+3
;@----------------------------------------------------------------------------
	// Code 2
	// BANK 0
	.byte BANK0C2+RXWA+0, BANK0C2+RXWA+1, BANK0C2+RXWA+2, BANK0C2+RXWA+3
	.byte BANK0C2+RXBC+0, BANK0C2+RXBC+1, BANK0C2+RXBC+2, BANK0C2+RXBC+3
	.byte BANK0C2+RXDE+0, BANK0C2+RXDE+1, BANK0C2+RXDE+2, BANK0C2+RXDE+3
	.byte BANK0C2+RXHL+0, BANK0C2+RXHL+1, BANK0C2+RXHL+2, BANK0C2+RXHL+3

	// BANK 1
	.byte BANK1C2+RXWA+0, BANK1C2+RXWA+1, BANK1C2+RXWA+2, BANK1C2+RXWA+3
	.byte BANK1C2+RXBC+0, BANK1C2+RXBC+1, BANK1C2+RXBC+2, BANK1C2+RXBC+3
	.byte BANK1C2+RXDE+0, BANK1C2+RXDE+1, BANK1C2+RXDE+2, BANK1C2+RXDE+3
	.byte BANK1C2+RXHL+0, BANK1C2+RXHL+1, BANK1C2+RXHL+2, BANK1C2+RXHL+3

	// BANK 2
	.byte BANK2C2+RXWA+0, BANK2C2+RXWA+1, BANK2C2+RXWA+2, BANK2C2+RXWA+3
	.byte BANK2C2+RXBC+0, BANK2C2+RXBC+1, BANK2C2+RXBC+2, BANK2C2+RXBC+3
	.byte BANK2C2+RXDE+0, BANK2C2+RXDE+1, BANK2C2+RXDE+2, BANK2C2+RXDE+3
	.byte BANK2C2+RXHL+0, BANK2C2+RXHL+1, BANK2C2+RXHL+2, BANK2C2+RXHL+3

	// BANK 3
	.byte BANK3C2+RXWA+0, BANK3C2+RXWA+1, BANK3C2+RXWA+2, BANK3C2+RXWA+3
	.byte BANK3C2+RXBC+0, BANK3C2+RXBC+1, BANK3C2+RXBC+2, BANK3C2+RXBC+3
	.byte BANK3C2+RXDE+0, BANK3C2+RXDE+1, BANK3C2+RXDE+2, BANK3C2+RXDE+3
	.byte BANK3C2+RXHL+0, BANK3C2+RXHL+1, BANK3C2+RXHL+2, BANK3C2+RXHL+3

	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2
	.byte RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2, RERR_C2

	// Previous Bank
	.byte BANK1C2+RXWA+0, BANK1C2+RXWA+1, BANK1C2+RXWA+2, BANK1C2+RXWA+3
	.byte BANK1C2+RXBC+0, BANK1C2+RXBC+1, BANK1C2+RXBC+2, BANK1C2+RXBC+3
	.byte BANK1C2+RXDE+0, BANK1C2+RXDE+1, BANK1C2+RXDE+2, BANK1C2+RXDE+3
	.byte BANK1C2+RXHL+0, BANK1C2+RXHL+1, BANK1C2+RXHL+2, BANK1C2+RXHL+3

	// Current Bank
	.byte BANK2C2+RXWA+0, BANK2C2+RXWA+1, BANK2C2+RXWA+2, BANK2C2+RXWA+3
	.byte BANK2C2+RXBC+0, BANK2C2+RXBC+1, BANK2C2+RXBC+2, BANK2C2+RXBC+3
	.byte BANK2C2+RXDE+0, BANK2C2+RXDE+1, BANK2C2+RXDE+2, BANK2C2+RXDE+3
	.byte BANK2C2+RXHL+0, BANK2C2+RXHL+1, BANK2C2+RXHL+2, BANK2C2+RXHL+3

	.byte BANK2C2+RXIX+0, BANK2C2+RXIX+1, BANK2C2+RXIX+2, BANK2C2+RXIX+3
	.byte BANK2C2+RXIY+0, BANK2C2+RXIY+1, BANK2C2+RXIY+2, BANK2C2+RXIY+3
	.byte BANK2C2+RXIZ+0, BANK2C2+RXIZ+1, BANK2C2+RXIZ+2, BANK2C2+RXIZ+3
	.byte BANK2C2+RXSP+0, BANK2C2+RXSP+1, BANK2C2+RXSP+2, BANK2C2+RXSP+3
;@----------------------------------------------------------------------------
	// Code 3
	// BANK 0
	.byte BANK0C3+RXWA+0, BANK0C3+RXWA+1, BANK0C3+RXWA+2, BANK0C3+RXWA+3
	.byte BANK0C3+RXBC+0, BANK0C3+RXBC+1, BANK0C3+RXBC+2, BANK0C3+RXBC+3
	.byte BANK0C3+RXDE+0, BANK0C3+RXDE+1, BANK0C3+RXDE+2, BANK0C3+RXDE+3
	.byte BANK0C3+RXHL+0, BANK0C3+RXHL+1, BANK0C3+RXHL+2, BANK0C3+RXHL+3

	// BANK 1
	.byte BANK1C3+RXWA+0, BANK1C3+RXWA+1, BANK1C3+RXWA+2, BANK1C3+RXWA+3
	.byte BANK1C3+RXBC+0, BANK1C3+RXBC+1, BANK1C3+RXBC+2, BANK1C3+RXBC+3
	.byte BANK1C3+RXDE+0, BANK1C3+RXDE+1, BANK1C3+RXDE+2, BANK1C3+RXDE+3
	.byte BANK1C3+RXHL+0, BANK1C3+RXHL+1, BANK1C3+RXHL+2, BANK1C3+RXHL+3

	// BANK 2
	.byte BANK2C3+RXWA+0, BANK2C3+RXWA+1, BANK2C3+RXWA+2, BANK2C3+RXWA+3
	.byte BANK2C3+RXBC+0, BANK2C3+RXBC+1, BANK2C3+RXBC+2, BANK2C3+RXBC+3
	.byte BANK2C3+RXDE+0, BANK2C3+RXDE+1, BANK2C3+RXDE+2, BANK2C3+RXDE+3
	.byte BANK2C3+RXHL+0, BANK2C3+RXHL+1, BANK2C3+RXHL+2, BANK2C3+RXHL+3

	// BANK 3
	.byte BANK3C3+RXWA+0, BANK3C3+RXWA+1, BANK3C3+RXWA+2, BANK3C3+RXWA+3
	.byte BANK3C3+RXBC+0, BANK3C3+RXBC+1, BANK3C3+RXBC+2, BANK3C3+RXBC+3
	.byte BANK3C3+RXDE+0, BANK3C3+RXDE+1, BANK3C3+RXDE+2, BANK3C3+RXDE+3
	.byte BANK3C3+RXHL+0, BANK3C3+RXHL+1, BANK3C3+RXHL+2, BANK3C3+RXHL+3

	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3
	.byte RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3, RERR_C3

	// Previous Bank
	.byte BANK2C3+RXWA+0, BANK2C3+RXWA+1, BANK2C3+RXWA+2, BANK2C3+RXWA+3
	.byte BANK2C3+RXBC+0, BANK2C3+RXBC+1, BANK2C3+RXBC+2, BANK2C3+RXBC+3
	.byte BANK2C3+RXDE+0, BANK2C3+RXDE+1, BANK2C3+RXDE+2, BANK2C3+RXDE+3
	.byte BANK2C3+RXHL+0, BANK2C3+RXHL+1, BANK2C3+RXHL+2, BANK2C3+RXHL+3

	// Current Bank
	.byte BANK3C3+RXWA+0, BANK3C3+RXWA+1, BANK3C3+RXWA+2, BANK3C3+RXWA+3
	.byte BANK3C3+RXBC+0, BANK3C3+RXBC+1, BANK3C3+RXBC+2, BANK3C3+RXBC+3
	.byte BANK3C3+RXDE+0, BANK3C3+RXDE+1, BANK3C3+RXDE+2, BANK3C3+RXDE+3
	.byte BANK3C3+RXHL+0, BANK3C3+RXHL+1, BANK3C3+RXHL+2, BANK3C3+RXHL+3

	.byte BANK3C3+RXIX+0, BANK3C3+RXIX+1, BANK3C3+RXIX+2, BANK3C3+RXIX+3
	.byte BANK3C3+RXIY+0, BANK3C3+RXIY+1, BANK3C3+RXIY+2, BANK3C3+RXIY+3
	.byte BANK3C3+RXIZ+0, BANK3C3+RXIZ+1, BANK3C3+RXIZ+2, BANK3C3+RXIZ+3
	.byte BANK3C3+RXSP+0, BANK3C3+RXSP+1, BANK3C3+RXSP+2, BANK3C3+RXSP+3

#endif // #ifdef __arm__
